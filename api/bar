import React, { useState } from 'react';
import PropTypes from 'prop-types';

const DefaultInputComponent = ({
  value,
  onChange,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyUp,
  onKeyPress,
  error,
  warning,
  success,
  label,
  placeholder,
  maxLength,
}) => {
  const [isFocused, setIsFocused] = useState(false);

  const handleFocus = (e) => {
    setIsFocused(true);
    onFocus && onFocus(e);
  };

  const handleBlur = (e) => {
    setIsFocused(false);
    onBlur && onBlur(e);
  };

  const handleChange = (e) => {
    onChange && onChange(e.target.value);
  };

  const handleKeyDown = (e) => {
    onKeyDown && onKeyDown(e);
  };

  const handleKeyUp = (e) => {
    onKeyUp && onKeyUp(e);
  };

  const handleKeyPress = (e) => {
    onKeyPress && onKeyPress(e);
  };

  const getInputStyles = () => {
    let styles = 'default-input-component';
    if (isFocused) {
      styles += ' focused';
    }
    if (error) {
      styles += ' error';
    } else if (warning) {
      styles += ' warning';
    } else if (success) {
      styles += ' success';
    }
    return styles;
  };

  return (
    <div className={getInputStyles()}>
      {label && <label>{label}</label>}
      <input
        type="text"
        value={value}
        onChange={handleChange}
        onFocus={handleFocus}
        onBlur={handleBlur}
        onKeyDown={handleKeyDown}
        onKeyUp={handleKeyUp}
        onKeyPress={handleKeyPress}
        placeholder={placeholder}
        maxLength={maxLength}
      />
    </div>
  );
};

DefaultInputComponent.propTypes = {
  value: PropTypes.string,
  onChange: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  onKeyPress: PropTypes.func,
  error: PropTypes.bool,
  warning: PropTypes.bool,
  success: PropTypes.bool,
  label: PropTypes.string,
  placeholder: PropTypes.string,
  maxLength: PropTypes.number,
};

export default DefaultInputComponent;
